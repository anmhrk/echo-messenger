/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ChatsRouteRouteImport } from './routes/chats/route'
import { Route as UnauthedRouteRouteImport } from './routes/_unauthed/route'
import { Route as ChatsIndexRouteImport } from './routes/chats/index'
import { Route as UnauthedIndexRouteImport } from './routes/_unauthed/index'
import { Route as ChatsIdRouteImport } from './routes/chats/$id'
import { Route as UnauthedSignupRouteImport } from './routes/_unauthed/signup'
import { Route as UnauthedLoginRouteImport } from './routes/_unauthed/login'

const ChatsRouteRoute = ChatsRouteRouteImport.update({
  id: '/chats',
  path: '/chats',
  getParentRoute: () => rootRouteImport,
} as any)
const UnauthedRouteRoute = UnauthedRouteRouteImport.update({
  id: '/_unauthed',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatsIndexRoute = ChatsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ChatsRouteRoute,
} as any)
const UnauthedIndexRoute = UnauthedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UnauthedRouteRoute,
} as any)
const ChatsIdRoute = ChatsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ChatsRouteRoute,
} as any)
const UnauthedSignupRoute = UnauthedSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => UnauthedRouteRoute,
} as any)
const UnauthedLoginRoute = UnauthedLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => UnauthedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/chats': typeof ChatsRouteRouteWithChildren
  '/login': typeof UnauthedLoginRoute
  '/signup': typeof UnauthedSignupRoute
  '/chats/$id': typeof ChatsIdRoute
  '/': typeof UnauthedIndexRoute
  '/chats/': typeof ChatsIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof UnauthedLoginRoute
  '/signup': typeof UnauthedSignupRoute
  '/chats/$id': typeof ChatsIdRoute
  '/': typeof UnauthedIndexRoute
  '/chats': typeof ChatsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_unauthed': typeof UnauthedRouteRouteWithChildren
  '/chats': typeof ChatsRouteRouteWithChildren
  '/_unauthed/login': typeof UnauthedLoginRoute
  '/_unauthed/signup': typeof UnauthedSignupRoute
  '/chats/$id': typeof ChatsIdRoute
  '/_unauthed/': typeof UnauthedIndexRoute
  '/chats/': typeof ChatsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/chats' | '/login' | '/signup' | '/chats/$id' | '/' | '/chats/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/signup' | '/chats/$id' | '/' | '/chats'
  id:
    | '__root__'
    | '/_unauthed'
    | '/chats'
    | '/_unauthed/login'
    | '/_unauthed/signup'
    | '/chats/$id'
    | '/_unauthed/'
    | '/chats/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  UnauthedRouteRoute: typeof UnauthedRouteRouteWithChildren
  ChatsRouteRoute: typeof ChatsRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/chats': {
      id: '/chats'
      path: '/chats'
      fullPath: '/chats'
      preLoaderRoute: typeof ChatsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_unauthed': {
      id: '/_unauthed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnauthedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chats/': {
      id: '/chats/'
      path: '/'
      fullPath: '/chats/'
      preLoaderRoute: typeof ChatsIndexRouteImport
      parentRoute: typeof ChatsRouteRoute
    }
    '/_unauthed/': {
      id: '/_unauthed/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof UnauthedIndexRouteImport
      parentRoute: typeof UnauthedRouteRoute
    }
    '/chats/$id': {
      id: '/chats/$id'
      path: '/$id'
      fullPath: '/chats/$id'
      preLoaderRoute: typeof ChatsIdRouteImport
      parentRoute: typeof ChatsRouteRoute
    }
    '/_unauthed/signup': {
      id: '/_unauthed/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof UnauthedSignupRouteImport
      parentRoute: typeof UnauthedRouteRoute
    }
    '/_unauthed/login': {
      id: '/_unauthed/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof UnauthedLoginRouteImport
      parentRoute: typeof UnauthedRouteRoute
    }
  }
}

interface UnauthedRouteRouteChildren {
  UnauthedLoginRoute: typeof UnauthedLoginRoute
  UnauthedSignupRoute: typeof UnauthedSignupRoute
  UnauthedIndexRoute: typeof UnauthedIndexRoute
}

const UnauthedRouteRouteChildren: UnauthedRouteRouteChildren = {
  UnauthedLoginRoute: UnauthedLoginRoute,
  UnauthedSignupRoute: UnauthedSignupRoute,
  UnauthedIndexRoute: UnauthedIndexRoute,
}

const UnauthedRouteRouteWithChildren = UnauthedRouteRoute._addFileChildren(
  UnauthedRouteRouteChildren,
)

interface ChatsRouteRouteChildren {
  ChatsIdRoute: typeof ChatsIdRoute
  ChatsIndexRoute: typeof ChatsIndexRoute
}

const ChatsRouteRouteChildren: ChatsRouteRouteChildren = {
  ChatsIdRoute: ChatsIdRoute,
  ChatsIndexRoute: ChatsIndexRoute,
}

const ChatsRouteRouteWithChildren = ChatsRouteRoute._addFileChildren(
  ChatsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  UnauthedRouteRoute: UnauthedRouteRouteWithChildren,
  ChatsRouteRoute: ChatsRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
